Состояния файлов в хранилище:
untracked   //не отслеживаемые файлы, находящиеся в поле зрения Git
unmodefied  //закоммиченный файлы, которые не подвергались изменениям
modefied    //изменения не проиндексированные для будущего коммита
staged      //проиндексированные файлы для будущего коммита

.gitignore      //файл с инструкциями для Git о том, какие типы файлов или папки нужно не отслеживать и не выводить даже в untracked
cat .gitignore  //команда для применения новых инструкций внутри файла .gitignore

git config --global user.name "Name Surname"      //назначить имя пользователя
git config --global user.email "somename@mail.ru" //назначить e-mail пользователя
git config --list                                 //выводит настройки списком
git help commit                                   //выводит документацию по команде git commit
git commit --help                                 //то же самое, то и предыдущая команда

cd E:/name_folder         //заходит в папку name_folder на диске E

git init                  //инициилизация нового репозитория в текущей папке
git status                //показывает состояние хранилища в текущей ветке
git diff                  //показывает что именно было изменено, но не проиндексировано
git diff -- staged        //показывает различия проиндексированных изменений и последнего коммита
git log -p -2             //выводит список коммитов;
                          //-p выводит разницу внесённую в каждый коммит
                          //-2 количество последних коммитов в логе
                          //--stat статистика изменений по коммитам
                          //--since=2.weeks выводит коммиты за последние 2 недели
                          //--since=2017-05-06 выводит коммиты начитая с даты 2017-05-06
                          //--untill=2017-05-06 выводит коммиты до даты 2017-05-06
git log --graph --all --decorate --oneline  //выводит красиво оформленный граф из коммитов и ветвей

git add .                 //добавляет в индекс все неотслеживаемые файлы (из состояния untracked становятся modefied)
git add file_name.html    //добавляет в индекс конкретный файл
git add folder_name       //добавляет в индекс папку
git add --all             //добавляет все файлы untracked в отслеживание и перестраивает индексы

git rm file_name                  //убирает файл (из отслеживания) заранее удаленный физически
git rm --cached file_name         //удаляет файл из индекса
git mv filename_old filename_new  //переименовывает файл filename_old в filename_new
git reset file_name               //убирает файл из проиндексированных, чтобы он не попал в коммит

git reset --hard d3eedfd9aef222f0f269438a3a5410c174c3b2c5 // удаление коммитов локально до того, индекс которого указан
git push --force origin master  // синхронизация изменений reset --hard в удаленном репозитории

git commit -m "name_commit"       //коммитит изменения только из индекса, присваивая слепку название name_commit
git commit -a -m "name_commit"    //коммитит изменения, предварительно добавив в индекс все modefied файлы

git commit --amend -m "Новый комметарий к последнему коммиту" //изменить комментарий к последнему коммиту
git push --force //запушить изменения в комментарии последнего коммита в удаленный репозиторий

git clone https://github.com/jquery/jquery.git    //клонирует репозиторий с удаленного источника в текущую папку

git remote                        //выводит список имен настроенных удаленных репозиториев
git remote -v                     //выводит список имен настроенных удаленных репозиториев с адресами для чтения и записи
git remote add remote_name url_remote                             //добавляет псевдоним удаленного репозитория
git remote add origin https://github.com/futurer1/rep_name.git    //создает псевдоним origin на удаленный репозиторий
git remote rename remote_name_old remote_name_new   //переименовывает псевдоним прикрепленного удаленного репозитория
git remote rm remote_name                           //удаляет псевдоним удаленного репозитория
git remote update origin                    // обновляет данные об удаленных репозиториях
git push -u origin master                   //выгружает изменения из ветки master на удаленный репозиторий с псевдонимом origin
git push remote_name --delete name_branch   //удаляет ветку name_branch с удаленного репозитория с псевдонимом remote_name

Традиционные названия веток:
  master
  develop или next
  proposed или pu (proposed updates)

git branch                  //выводит список всех веток репозитория, значек * будет стоять напротив выбранной активной ветки
git branch -v               //выводит списком последний коммит на каждой из локальных веток
git branch -vv              //выводит списком отслеживаемые локальные ветки с доп. информацией по ним
git branch --merged         //выводит информацию какие ветки были слиты в текущую. Текущая отмечена знаком *
git branch --no-merged      //выводит список не слитых веток

git branch name_new_branch  //создает новую ветку с названием name_new_branch
git checkout name_branch    //переходит в ветку name_branch, она становится активной
git checkout -b new_branch  //создает новую ветку new_branch и сразу переходит в неё (результат выполнения двух предыдущих команд)

git branch -d name_branch   //удаляет ветку name_branch, которая до этого была объединена с другой (merged)
git branch -D name_branch   //жестко удаляет ветку даже если её изменения не были закоммичены и слиты. Может привести к потере данных!
git branch -m старое-имя новое-имя //переименовывает локальную ветку

git merge name_branch       //сливает ветку name_branch в текущую активную

git fetch remote_name       //обновляет данные, забирая из удаленного репозитория с псевдонимом remote_name
                            //но не сливает с локальными наработками
git pull                    //извлекает данные из удаленного репозитория (git fetch ...) и пытается слить с текущей веткой (git merge ...)

git stash                   //припрятать изменения на время, не делая при этом commit. Например, чтобы поработать в другой ветке.
git stash save 'name'       //припрятать изменения с комментарием name
git stash list              //просмотреть листинг припрятанных изменений
git stash show stash@{2}    //посмотреть измененные в припрятанном файлы
git stash apply             //применить последнее припрятанное
git stash apply stash@{2}   //применить припрятанное с конкретным именем stash@{2}
git stash apply --index     //применить последнее припрятанное с добавлением в индекс
git stash drop stash@{2}    //удалить конкретное припрятанное
git stash branch name_new_branch    //создает новую ветку на основе последнего коммита на котором вы находились во время прятанья
git stash pop               //применение самого последнего набора сохраненных изменений в текущей ветке и удаление припрятанного из стека
